<?php
// $Id$

/**
 * @file
 * Ctools hooks for a multi step form
 */

/**
 * Implementation of hook_menu()
 */
function d7_poll_menu() {
  $items = array();
  
  $items['poll/%ctools_js/d7'] = array(
    'title' => t('Add a reviewer'),
    'page callback' => 'd7_poll',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'modal' => TRUE,

    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Page callback for poll/%ctools_js/d7
 */
function d7_poll($js = NULL, $step = NULL) {
  
  $form_info = array(
    'id' => 'd7-poll-form', //form id
    'path' => "poll/" . ($js ? 'ajax' : 'nojs') . "/d7/%step", //pass the step we're on to the form, step1, step2, ..etc
    'show trail' => TRUE, //show the breadcrumb / path trail for the forms
    'show back' => TRUE, //show the back button
    'show cancel' => TRUE, //show the cancel button
    'show return' => FALSE, //show the update and return button
    'next callback' =>  'd7_poll_wizard_next', //a callback function to run when the next button is pressed
    'finish callback' => 'd7_poll_wizard_finish', //callback when finish button is pressed
    'cancel callback' => 'd7_poll_wizard_cancel', //callback when cancel button is pressed
    'order' => array( // this controls order, as well as form labels
      'step1' => t('Search reviewer'),
      'step2' => t('Select reviewer'),
      'step3' => t('Customize email')
    ),
    'forms' => array( // here we map a step to a form id.
      'step1' => array( //What we're doing here is telling the wizard when step1 is passed as arg show the form with form_id d7_step_1
        'form id' => 'reviewer_filter_form1'
      ),
      'step2' => array(
        'form id' => 'review_select_form1'
      ),
      'step3' => array(
        'form id' => 'edit_email'
      ),

    ),
  );
 
/** Add $node to form_state*/
$node = node_load(354);

$form_state = array(
    'ajax' => $js,
    'node' => $node,
  );


 
  $object_id = 'd7_poll_d7';
  
  if (empty($step)) {
    d7_cache_clear($object_id);
  }

  $object = d7_cache_get($object_id);
  $form_state = array(
    'ajax' => $js,
    'object_id' => $object_id,
    'object' => &$object,
    'node' => $node,
    'modal' => true,
  );

  // Send this all off to our form. This is like drupal_get_form only wizardy.
 ctools_include('modal');
    ctools_include('ajax');
    ctools_add_js('ajax-responder');

  ctools_include('wizard');
  $form = ctools_wizard_multistep_form($form_info, $step, $form_state);
  $output = drupal_render($form);
  

   if($js){
   $commands = ctools_modal_form_render($form_state, $output);
    
    print ajax_render($commands);
    return;
  }
    return $output;
}


function d7_poll_step_1($form, &$form_state) {
  
  $form_state['title'] = t('What is awesome in Drupal 7?');
  
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('What\'s your name?'),
    '#required' => TRUE,
  );
  
  $form['choices'] = array(
    '#type' => 'radios',
    '#title' => t('What is your favourite new Drupal 7 feature?'),
    '#options' => d7_poll_options(),
    '#default_value' => '',
    '#required' => TRUE,
  );
  
  return $form;
}

function d7_poll_options() {
  return array(
    'overlay' => 'The new Admin overlay, toolbar and contextual links',
    'um' => 'The integrated Update Manager',
    'files' => 'Being able to have both public and private files',
    'field' => 'Field API (CCK in core)',
    'image' => 'Image Styles (ImageCache in core)',
  );
}

function edit_email($form, &$form_state, $currentPage = 1, $hideTable = false){
	dpm($form_state['object']->name);
        watchdog('called from edit email','yes');
       $form_state['values']['name'] = $form_state['object']->name;
        dpm($form_state);
        $account = user_load($form_state['values']['accounts']);
        $node = $form_state['node']; 
        $body = $form_state['values']['default_email'];//['default_email'];
				$body = str_replace('{{reviewer}}', $account->name, $body);
				$body = str_replace('{{title}}', $node->title, $body);
				$body = str_replace('{{tracking_number}}', $node->nid . '-' . $node->vid, $body);
				$body = str_replace('{{url}}', url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE)), $body);
				$body = str_replace('{{confirm_url}}', url('swj/verify/'.$node->nid.'/'.$node->vid.'/'.$form_state['values']['accounts'], array('absolute' => TRUE)), $body);
        $form['fset_review']['custom_email'] = array(
                        '#title' => 'Email body',
                        '#type' => 'textarea',
                        '#description' => 'You can change the default text to be sent to the editor.',
                        '#cols' => 40,
                        '#rows' => 20,
                        '#required' => FALSE,
                        '#default_value'=>$body,
                );
          return $form;

}
function review_select_form1($form, &$form_state, $currentPage = 1, $hideTable = false) {
	global $base_url;
        watchdog('called now', 'called now');
	//drupal_add_js(drupal_get_path('module', 'reviewer_select') . '/add_reviewer.js');
        //dpm($form_state);
	if (isset($form_state['values']['reviewer_pager']))
		$currentPage = $form_state['values']['reviewer_pager'];
        $node = $form_state['node'];
	$pageLimit = 10;
	$pagerSize = 10;
	$nameVal = $form_state['object']->name;//['name'];
        $form_state['values']['name'] = $form_state['object']->name;
        watchdog('oops this one is called','oops this one is called');
        //dpm($nameVal);
	if (is_array($node)) {
		$nid = $node['nid'];
		$vid = $node['vid'];
		if (isset($node['name'])) {
			$nameVal = $node['name'];
		}

	} else {
		$nid = $node -> nid;
		$vid = $node -> vid;
	}
        //dpm($form_state);
	// decide when to show the available reviewers to add to paper
	// defaults to showing the table
	if (!$hideTable) {
		$header = array(
			'name' => array(
				'data' => t('Username'),
				'field' => 'u.name'
			),
			'status' => array(
				'data' => t('Reviews assigned'),
				'field' => 'u.status'
			),
			'submitted' => array('data' => t('Reviews Submitted')),
			'roles' => array('data' => t('Roles')),
		);
	
		// friendly reviewer search, allows case insensitive searching between first OR
		// last name
		$like = '';
		if ($nameVal != '') {
			$like .= 'AND ';
			$nv = strtoupper($nameVal);
			$like .= "UPPER(u.name) LIKE '%$nv%'";
		}
	
		// run ranged query and counting query
		$lower = ($currentPage - 1) * $pageLimit;
		$upper = $pageLimit;
                $query = db_select('users','u');
                if($nameVal != ''){
                $query->condition('name','%'.$nameVal.'%', 'LIKE');
                }
                watchdog('called','called23232323');
                $query->leftjoin('paper_reviewer','p','u.uid = p.ruid');
                $query->condition('u.status',0,'<>');
                $query->addExpression('Count(ruid)','num_reviews');
                watchdog('called','called23232444'); 
                $query->addExpression('IFNULL(SUM(submitted),0)','reviews_submitted');
                $query->fields('u', array('name','status','uid'));
                watchdog('called','called232355555555555555555');
                $query->orderBy('u.name');
                $query->groupBy('u.uid');
                $query = $query -> extend('PagerDefault') -> extend('TableSort');
                $results = $query->execute();
		$result = db_query("SELECT u.name, u.status, u.uid, COUNT(ruid) as expression, IFNULL(SUM(submitted), 0) as expression_2 FROM users u LEFT JOIN paper_reviewer on ruid = u.uid WHERE NOT EXISTS (SELECT p.ruid, p.nid, p.vid FROM paper_reviewer p WHERE u.uid = p.ruid AND p.nid = $nid AND p.vid = $vid) $like AND u.status <> 0 GROUP BY u.uid ORDER BY u.name ASC LIMIT $lower, $upper");
		$count = db_query("SELECT COUNT(u.uid) FROM users u WHERE NOT EXISTS (SELECT p.ruid, p.nid, p.vid FROM paper_reviewer p WHERE u.uid = p.ruid AND p.nid = $nid AND p.vid = $vid) $like AND u.status <> 0") -> fetchField();
		
		// test if user is eic
		module_load_include('module', 'testaction', 'testaction');
		global $user;
		$r = db_query("Select count(u.uid) from users_roles u INNER JOIN role r on u.rid = r.rid where u.uid =" . $user -> uid . " and r.name='" . EIC_ROLE . "'") -> fetchField();
		if ($r > 0) $is_eic = true;
		else $is_eic = false;
		
		// build results
		$status = array(
			t('blocked'),
			t('active')
		);
		$roles = array_map('check_plain', user_roles(TRUE));
		$accounts = array();
		$options = array();
		foreach ($results as $account) {
			$users_roles = array();
			$roles_result = db_query('SELECT rid FROM {users_roles} WHERE uid = :uid', array(':uid' => $account -> uid));
			foreach ($roles_result as $user_role) {
				$users_roles[] = $roles[$user_role -> rid];
			}
			asort($users_roles);
	
			if ($is_eic) $name_view = "<a href= $base_url/swj/reviewer/profile/$account->uid/$nid>$account->name</a>";
			else $name_view = $account->name;
			
			$options[$account -> uid] = array(
				'name' => $name_view,
				'status' => $account -> num_reviews,
				'roles' => theme('item_list', array('items' => $users_roles)),
				'submitted' => $account -> reviews_submitted,
                                
			);
		}
	
		// build pager
	/*	$numPages = ceil($count / $pageLimit);
		$pages = '<div class="item-list"><ul class="pager">';
		if ($numPages > 1 && $currentPage != 1)
			$pages .= '<li class="pager-previous"><a href="#previous" title="Go to previous page">â€¹ previous</a></li>';
		if ($currentPage % 10 == 0) {
			$i = $currentPage - ($pagerSize - 1);
		} else {
			$i = $currentPage - (($currentPage % $pagerSize) - 1);
		}
		$j = $i + $pagerSize - 1;
		
		for (; $i <= $numPages && $i <= $j; $i++) {
			if ($i == $currentPage) {
				$pages .= '<li class="pager-current">' . $i . '</li>';
			} else {
				$pages .= '<li class="pager-item"><a href="#' . $i . '" title="Go to page ' . $i . '">' . $i . '</li>';
			}
		}
		if ($numPages > 1 && $currentPage != $numPages)
			$pages .= '<li class="pager-next"><a href="#next" title="Go to next page">next â€º</a></li>';
		$pages .= '</ul></div>';
		$pager = array('#markup' => $pages);
	*/
		// set elements in the form
		$form['fset_review'] = array(
			'#title' => 'Available Reviewers',
			'#type' => 'fieldset',
			'#attributes' => array('id' => 'edit-fset-review')
		);
		$form['fset_review']['accounts'] = array(
			'#title' => 'Reviewer',
                        '#type' => 'tableselect',
			'#js_select' => FALSE,
			'#header' => $header,
			'#options' => $options,
			'#multiple' => false,
                        '#required' => true,
			'#empty' => t('No people available.'),
			'#suffix' => render($pager),
			'#prefix' => '<div id="selected_reviewers_hide">' // used for hiding with js
		);
                $form['fset_review']['pager'] = array('#theme' => 'pager', '#tags' => array() );
		
	/*	$form['fset_review']['reviewer_pager'] = array(
			'#type' => 'hidden',
			'#default_value' => (isset($form_state['values']['reviewer_pager']) ? $form_state['values']['reviewer_pager'] : $currentPage)
		);
		$form['fset_review']['reviewer_pager_submit'] = array(
			'#type' => 'button',
			'#value' => t('Pager'),
			'#ajax' => array(
				'callback' => 'ajax_reviewer_pager',
				'wrapper' => 'one',
				'method' => 'replace',
				'effect' => 'fade',
			)
		);
	*/
		$form['fset_review']['nd'] = array(
			'#type' => 'hidden',
			'#value' => $nid,
		);
		$form['fset_review']['vd'] = array(
			'#type' => 'hidden',
			'#value' => $vid,
		);
               watchdog('value of the default email',REVIEWER_ASSIGNMENT_MSG);
                $form['fset_review']['default_email'] = array(
			'#title' => 'Email body',
			'#type' => 'hidden',
			'#required' => FALSE,
			'#value' => REVIEWER_ASSIGNMENT_MSG,
		);
	

		$form['fset_review']['confirm_url'] = array(
			'#type' => 'hidden',
			'#value' => url('swj/verify/' . $nid . '/' . $vid . '/', array('absolute' => TRUE))
		);
		$form['fset_review']['current_url'] = array(
			'#type' => 'hidden',
			'#value' => url('node/' . $nid, array('absolute' => TRUE))
		);
	
		/*$form['fset_review']['custom_email'] = array(
			'#title' => 'Email body',
			'#type' => 'textarea',
			'#description' => 'You can change the default text to be sent to the editor.',
			'#cols' => 40,
			'#rows' => 5,
			'#required' => FALSE,
			'#value' => '',
		);*/
				/*$form['fset_review']['preview'] = array(
			'#type' => 'button',
			'#value' => t('Add Reviewer(s)'),
		);*/
		// main button used by js to submit data
		
		/*$form['fset_review']['options'] = array(
			'#type' => 'button',
			'#value' => t('Add Reviewer(s)'),
			//'#suffix' => '</div>' . render($selected),
			'#suffix' => '</div>',
			'#ajax' => array(
				'callback' => 'ajax_reviewer_callback',
				'wrapper' => 'one',
				'method' => 'replace',
				'effect' => 'fade',
			)
		);*/
		
	//	$form['fset_review']['pager'] = array('#markup' => theme('pager'));
                 
	}
	
	
	// moves selected reviewers to separate box
	$selected = selectedrev($node);
	/*$form['fset_selected_reviewers'] = array(
		'#type' => 'fieldset',
		'#title' => t('Selected Reviewers (Reviewers that have been added to the paper)'),
		'#collapsible' => true,
	);
	$form['fset_selected_reviewers']['content'] = array(
		'#type' => 'container',
		'#suffix' => render($selected),
	);*/
	
	/*$form['fset_selected_reviewers']['delete'] = array(
		'#type' => 'button',
		'#value' => t('Delete reviewer'),
		'#ajax' => array(
			'callback' => 'ajax_reviewer_entry_delete',
			'wrapper' => 'one',
			'method' => 'replace',
			'effect' => 'fade',
		)
	);*/
	//$form['fset_selected_reviewers']['delete_reviewer'] = array('#type' => 'hidden', );
	$form['fset_selected_reviewers']['nd'] = array(
		'#type' => 'hidden',
		'#value' => $nid,
	);
	$form['fset_selected_reviewers']['vd'] = array(
		'#type' => 'hidden',
		'#value' => $vid,
	);
	$form['#prefix'] = '<div id="one">';
        $form['#suffix'] = '</div>';
	return $form;
}

function edit_email_submit($form, &$form_state){
  $form_state['object']->name = $form_state['values']['name'];
}
function reviewer_filter_form1_submit($form, &$form_state){
  $form_state['object']->name = $form_state['values']['name'];
}
function review_select_form1_submit($form, &$form_state){
  $form_state['object']->name = $form_state['values']['name'];
}
function reviewer_filter_form1($form, &$form_state) {
	$node = $form_state['node'];
        $form_state['title'] ="Enter the name of the person you are searching for:";

	$form['nd'] = array(
		'#type' => 'hidden',
		'#value' => $node -> nid,
	);
	$form['vd'] = array(
		'#type' => 'hidden',
		'#value' => $node -> vid,
	);
	$form['name'] = array(
		'#title' => 'Name',
		'#type' => 'textfield',
		'#size' => 'small'
	);
	/*$form['rev_filter']['update'] = array(
		'#title' => 'update',
		'#value' => 'Update',
		'#type' => 'button',
		'#ajax' => array(
			'callback' => 'ajax_reviewer_callback',
			'wrapper' => 'one',
			'method' => 'replace',
			'effect' => 'fade',
		)
	);*/
	/*$form['rev_filter']['reset'] = array(
		'#title' => 'Reset',
		'#value' => 'Reset',
		'#type' => 'button',
		'#ajax' => array(
			'callback' => 'ajax_reset_callback',
			'wrapper' => 'one',
			'method' => 'replace',
			'effect' => 'fade',
		)
	);*/

	return $form;
}

function d7_poll_step_2($form, &$form_state) {
  
  $name = $form_state['object']['name'];
  $options = d7_poll_options();
  $choice = $options[$form_state['object']['choices']];
  
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Hey @name, tell us why you chose @choice', array(
      '@name' => $name,
      '@choice' => $choice,
    )),
  );
  
  return $form;
}



/**
 * Cache helpers
 */
function d7_cache_set($id, $object) {
  ctools_include('object-cache');
  ctools_object_cache_set('d7_poll_d7', $id, $object);
}

/**
 * Get the current object from the cache, or default.
 */
function d7_cache_get($id) {
  ctools_include('object-cache');
  return ctools_object_cache_get('d7_poll_d7', $id);
}

/**
 * Clear the wizard cache.
 */
function d7_cache_clear($id) {
  ctools_include('object-cache');
  ctools_object_cache_clear('d7_poll_d7', $id);
}

/**
 * Next callback
 */
function d7_poll_wizard_next(&$form_state) {
  $form_state['object'] = $form_state['values'];
  d7_cache_set($form_state['object_id'], $form_state['object']);
}
